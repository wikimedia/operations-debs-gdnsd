#!/bin/sh
### BEGIN INIT INFO
# Provides:          gdnsd
# Required-Start:    $syslog $remote_fs
# Required-Stop:     $syslog $remote_fs
# Should-Start:      $local_fs
# Should-Stop:       $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: gdnsd
# Description:       authoritative name server
### END INIT INFO

# ------------------------------------------------------------------------------
# NOTE: This is an *EXAMPLE* to illustrate how an LSB/sysvinit-style initscript
# could be structured to support gdnsd on Linux.  I don't expect it to just
# work out of the box anywhere.
# ------------------------------------------------------------------------------

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=@GDNSD_SBINDIR@/gdnsd
GDNSDCTL_BIN=@GDNSD_BINDIR@/gdnsdctl
NAME=gdnsd

# editable inputs, or override in /etc/default/gdnsd:
GDNSD_RUNDIR=@GDNSD_RUNDIR@
GDNSD_CFGDIR="-c @GDNSD_CONFIGDIR@"
GDNSD_USER=gdnsd

test -x $DAEMON || exit 0

. /lib/lsb/init-functions

[ -f /etc/default/$NAME ] && . /etc/default/$NAME

gdnsd_start() {
    GDNSD_UID=$(id -u $GDNSD_USER)
    GDNSD_GID=$(id -g $GDNSD_USER)
    GDNSD_GRPS=$(id -G $GDNSD_USER | sed 's/ /,/g')
    GDNSD_GRNAM=$(id -ng $GDNSD_USER)

    # gdnsd does this internally anyways, but always a good idea!
    umask 022

    # Set up the rundir, in case the parent directory doesn't allow gdnsd to
    # create it for itself
    mkdir -p $GDNSD_RUNDIR ||:
    chown ${GDNSD_USER}:${GDNSD_GRNAM} $GDNSD_RUNDIR
    chmod 0700 $GDNSD_RUNDIR

    # For a critical authserver: raise priority, allow lock_mem=true,
    # and make accidental oomkill unlikely:
    renice -n -11 $$
    ulimit -l unlimited
    echo -900 >/proc/$$/oom_score_adj

    # If Linux kernel >= 4.3 && util-linux (setpriv) >= v2.31, ambient
    # capabilities are supported and the command below can be used unmodified,
    # without messing with any filesystem-level capabilities.
    # Otherwise, remove the "--ambient-caps" line from setpriv below, and then
    # to make things work: on installation of the binary, the binary's
    # filesystem-level capability for cap_net_bind_service must be set to "ei"
    # (but not p, which would let any random system user bind privileged ports
    # using the gdnsd binary):
    # setcap "cap_net_bind_service=ei" @GDNSD_SBINDIR@/gdnsd
    # This setcap command has to be run every time a new binary is installed,
    # so is probably best done from packaging post-installation scripts.
    setpriv --reuid $GDNSD_UID --regid $GDNSD_GID --groups $GDNSD_GRPS\
        --securebits +noroot,+noroot_locked,+no_setuid_fixup,+no_setuid_fixup_locked \
        --bounding-set -all,+net_bind_service \
        --ambient-caps -all,+net_bind_service \
        --inh-caps     -all,+net_bind_service \
        --no-new-privs \
        $DAEMON $GDNSD_CFGDIR -i daemonize >/dev/null 2>/dev/null
    ret=$?
    log_end_msg $ret
    exit $ret
}

gdnsdctl_cmd() {
    $GDNSDCTL_BIN $GDNSD_CFGDIR $1 >/dev/null 2>/dev/null
}

gdnsdctl_cmd_exit() {
    $GDNSDCTL_BIN $GDNSD_CFGDIR $1 >/dev/null 2>/dev/null
    ret=$?
    log_end_msg $ret
    exit $ret
}

case "$1" in
    start)
        log_daemon_msg "Starting $NAME" "$NAME"
        gdnsd_start
        ;;
    stop)
        log_daemon_msg "Stopping $NAME" "$NAME"
        gdnsdctl_cmd_exit "-i stop"
        ;;
    reload-zones)
        # "-i reload-zones" will succeed if no daemon is running
        log_daemon_msg "Reloading zonefiles for $NAME" "$NAME"
        gdnsdctl_cmd_exit "-i reload-zones"
        ;;
    reload|force-reload)
        # "replace" without -i will fail if the daemon isn't already running
        log_daemon_msg "Reloading $NAME" "$NAME"
        gdnsdctl_cmd_exit "replace"
        ;;
    condrestart|try-restart)
        # "-i replace" will "reload" for a running daemon, but exits 0 if not
        # already running
        gdnsdctl_cmd_exit "-i replace"
        ;;
    restart)
        # If already running, "-i replace" will do the "restart" and "-i start"
        # afterwards will be a no-op.  If not already running, "-i replace"
        # will be a no-op and "-i start" afterwards will do a fresh start
        log_daemon_msg "Restarting $NAME" "$NAME"
        gdnsdctl_cmd "-i replace"
        if test $? = 0; then
            gdnsd_start
        fi
        ret=$?
        log_end_msg $ret
    status)
        gdnsdctl_cmd "status"
        case "$?" in
            0) log_success_msg "$NAME is running"; exit 0 ;;
            *) log_failure_msg "$NAME is not running"; exit 3 ;;
        esac
        ;;
    *)
        echo "Usage: /etc/init.d/gdnsd {start|stop|reload-zones|reload|force-reload|restart|condrestart|status}"
        exit 1
esac

exit 0
